###############################################################################
#                                                                             #
#  Configuration stuff. You can change what is here as you wish. Just try to  #
#  make sense with all you write ;)                                           #
#                                                                             #
#  DEBUG=1       : Build a debugging library and/or examples                  #
#  PROFILE=1     : Build a profiling library and/or examples                  #
#  USE_EGG=1     : Link against Shawn's egg library.                          #
#  USE_MSS=1     : Link against MSS (memory leak library).                    #
#  USE_FORTIFY=1 : Link against FORTIFY (memory leak library).                #
#  USE_MMX=1     : Add special MMX code to speed up blitting (dangerous!).    #
#                                                                             #
#  If you define both PROFILE and DEBUG, the last one will be used (make      #
#  PROFILE=1 DEBUG=1 will build a debugging library).                         #
#                                                                             #
#  ReyBrujo, 2002                                                       #
#                                                                             #
###############################################################################


#                                                                             #
#  Some package information.                                                  #
#  The ID_SHORT is the name (lowcase) of the package, in example, 'warship'.  #
#  Note that I use a somewhat similar versioning way as GNU. A MAJOR, MINOR   #
#  and BUGFIX number. With these four elements I create the ID_LONG, which    #
#  is the real name of the package. In example, this set of variables...      #
#                                                                             #
#  ID_SHORT := warship                                                        #
#  MAJOR    := 0                                                              #
#  MINOR    := 1                                                              #
#  BUGFIX   := 2                                                              #
#  ...will set ID_LONG to warship-0.1.2                                       #
#                                                                             #
#  Some variables are only used with the 'header' target:                     #
#  AUTHOR: Name of the author                                                 #
#  YEAR  : Year of release (usually four digits)                              #
#  EMAIL : Author e-mail address (or another way to contact the author)       #
#  WSITE : Where to find the package                                          #
#                                                                             #
ID_SHORT := pw
MAJOR    := 0
MINOR    := 0
BUGFIX   := 9
VERSION  := $(MAJOR).$(MINOR).$(BUGFIX)
ID_LONG  := $(ID_SHORT)-$(VERSION)
AUTHOR   := ReyBrujo
YEAR     := 2008
EMAIL    := reybrujo@gmail.com
WSITE    := none


#                                                                             #
#  Set the different programs we will be using. You must supply them all if   #
#  you have access to them. I think UPX (executable compressor) and GPP are   #
#  the only ones that might bring problems. If you don't have UPX, set it to  #
#  nothing. GPP might switch between 'gpp' and 'gxx', depending the compiler  #
#  you have configured.                                                       #
#  If you have pkzip rather than zip (traitor!) configure the variables to    #
#  match the executable and its flags.                                        #
#                                                                             #
GCC    := gcc
GPP    := g++
MAKE   := make
RANLIB := ranlib
AR     := ar
UPX    := upx
ZIP    := zip
TGZ    := tar
RM     := rm
CTAGS  := ctags


#                                                                             #
#  Directory names. You should not change them unless you change their names  #
#  (why you would do something like that? ;)                                  #
#                                                                             #
SRC_DIR := src
OBJ_DIR := obj
BIN_DIR := src
DOC_DIR := docs
MAK_DIR := make
INC_DIR := src #include
BAK_DIR := backup



#                                                                             #
#  Default flags. CFLAGS are the compilation flags for C. CXXFLAGS are used   #
#  for C++ compilation. LFLAGS are the library flags, which should be empty   #
#  now (unless you need to link your executable with another library).        #
#  TGZFLAGS are passed as flags to your TGZ executable, and the ZIPFLAGS...   #
#  guess!                                                                     #
#  DFLAGS are the flags used to build the dependencies.                       #
#                                                                             #
CXXFLAGS := -Wall -Werror -W -I $(INC_DIR) -I . -finline
CFLAGS   := -Wall -Werror -W -I $(INC_DIR) -I .
DEPFLAGS := -MM -MG -I $(INC_DIR) -I .
LFLAGS   :=
TGZFLAGS := cvzf
ZIPFLAGS := -r -v
CTAGSFLAGS := --fields=+ainS --extra=+q --c++-kinds=+p
RMFLAGS  := -rf



#                                                                             #
#  Default executable extension (DOS/Windows). The makefile "inheriting" the  #
#  configuration one (in other words, this ;) will override if needed.        #
#                                                                             #
EXE_SUFFIX :=


#                                                                             #
#  The suffix of the source files. It is usually one between 'c', 'cpp', 'cc' #
#  or 'cxx'. Choose the one you like most (commonly, lowercase).              #
#                                                                             #
SRC_SUFFIX := cpp


#                                                                             #
#  The suffix of the object files. It is usually one between 'o' and 'obj'.   #
#  Choose the one you like most (commonly, lowercase).                        #
#                                                                             #
OBJ_SUFFIX := o


#                                                                            #
#  By default, all the files found in the SRC_DIR directory and matching     #
#  the SRC_SUFFIX suffix are compiled.                                       #
#                                                                            #
FILES := $(notdir $(basename $(wildcard $(SRC_DIR)/*.$(SRC_SUFFIX))))
FILES += $(addprefix engine/,$(notdir $(basename $(wildcard $(ENG_DIR)/*.$(SRC_SUFFIX)))))
FILES += $(addprefix object/,$(notdir $(basename $(wildcard $(ITM_DIR)/*.$(SRC_SUFFIX)))))
FILES += $(addprefix module/,$(notdir $(basename $(wildcard $(MOD_DIR)/*.$(SRC_SUFFIX)))))
FILES += $(addprefix internal/,$(notdir $(basename $(wildcard $(INT_DIR)/*.$(SRC_SUFFIX)))))


#                                                                             #
#  The default name of the executable to generate. By default, it should      #
#  always be prefixed with $(BIN_DIR) (so that it is placed in the binary     #
#  directory), and suffixed with the $(EXE_SUFFIX) variable. However, the     #
#  name of the executable might not be the same of $(ID_SHORT).               #
#                                                                             #
#  EXEC := $(BIN_DIR)/mybinary$(EXE_SUFFIX)                                   #
#                                                                             #
EXEC := $(BIN_DIR)/$(ID_SHORT)$(EXE_SUFFIX)


#                                                                             #
#  If we are using one of the memory leak libraries (I only use one of these  #
#  two), add the flags if needed.                                             #
#                                                                             #
ifdef USE_FORTIFY
CXXFLAGS += -DFORTIFY
CFLAGS   += -DFORTIFY
LIBRARY  += fortify
else
ifdef USE_MSS
CXXFLAGS += -DMSS
CFLAGS   += -DMSS
LIBRARY  += mss
endif
endif


#                                                                             #
#  Finally, add to the standard flags the options, according to the type of   #
#  linking we are looking for.                                                #
#                                                                             #
ifdef DEBUG
CXXFLAGS += -ggdb3 # -g3 -ggdb3 -gstabs3 -DDEBUGMODE
CFLAGS   += -g3 -ggdb3 -gstabs3 -DDEBUGMODE
LFLAGS   += -g3 -ggdb3 -gstabs3 -DDEBUGMODE
LIBRARY  += alld
else
ifdef PROFILE
CXXFLAGS += -pg -finline-functions -Winline
CFLAGS   += -pg
LFLAGS   += -pg
LIBRARY  += allp
else
CXXFLAGS += -s -O2 -ffast-math -funroll-loops -fomit-frame-pointer
CFLAGS   += -s -O2 -ffast-math -funroll-loops -fomit-frame-pointer
LFLAGS   += -s -O2 -ffast-math -funroll-loops -fomit-frame-pointer
LIBRARY  += alleg
endif
endif


#                                                                             #
#  If using the MMX code, define the USE_MMX variable. Note that it is up to  #
#  you try it. The code speeds up the blitting of memory bitmaps, but it has  #
#  heavy restrictions.                                                        #
#                                                                             #
ifdef USE_MMX
CXXFLAGS += -DUSE_MMX
CFLAGS   += -DUSE_MMX
LFLAGS   += -DUSE_MMX
endif
